import streamlit as st
import pandas as pd
from datetime import datetime
import io
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.colors import HexColor
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch

# Configuration de la page
st.set_page_config(
    page_title="SnapCatalog MVP",
    page_icon="üì∏",
    layout="wide"
)

def create_pdf_catalog(df):
    """G√©n√®re un PDF simple √† partir du DataFrame"""
    buffer = io.BytesIO()
    
    # Cr√©ation du document
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    elements = []
    styles = getSampleStyleSheet()
    
    # Titre
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Title'],
        fontSize=24,
        spaceAfter=30,
        textColor=HexColor('#2E86AB')
    )
    title = Paragraph("üì∏ Mon Catalogue Produits", title_style)
    elements.append(title)
    
    # Date
    date_str = f"G√©n√©r√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}"
    date_para = Paragraph(date_str, styles['Normal'])
    elements.append(date_para)
    elements.append(Spacer(1, 20))
    
    # Conversion DataFrame en liste pour le tableau
    data = [df.columns.tolist()]  # En-t√™tes
    for _, row in df.iterrows():
        data.append(row.tolist())
    
    # Cr√©ation du tableau
    table = Table(data)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), HexColor('#2E86AB')),
        ('TEXTCOLOR', (0, 0), (-1, 0), HexColor('#FFFFFF')),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), HexColor('#F8F9FA')),
        ('GRID', (0, 0), (-1, -1), 1, HexColor('#DEE2E6'))
    ]))
    
    elements.append(table)
    
    # Stats
    elements.append(Spacer(1, 30))
    stats = Paragraph(f"<b>Total produits :</b> {len(df)}", styles['Normal'])
    elements.append(stats)
    
    # G√©n√©ration du PDF
    doc.build(elements)
    buffer.seek(0)
    return buffer

def main():
    st.title("üì∏ SnapCatalog MVP")
    st.markdown("---")
    
    # Upload du fichier
    uploaded_file = st.file_uploader(
        "üì§ Choisissez votre fichier CSV",
        type=['csv'],
        help="Uploadez un fichier CSV avec vos produits"
    )
    
    if uploaded_file is not None:
        try:
            # Lecture du CSV
            df = pd.read_csv(uploaded_file)
            
            st.success(f"‚úÖ Fichier charg√© avec succ√®s ! ({len(df)} lignes)")
            st.dataframe(df.head())
            
            # Bouton g√©n√©ration PDF
            if st.button("üìÑ G√©n√©rer PDF Catalogue", type="primary"):
                with st.spinner("G√©n√©ration du PDF en cours..."):
                    try:
                        pdf_buffer = create_pdf_catalog(df)
                        
                        st.success("üéâ PDF g√©n√©r√© avec succ√®s !")
                        
                        # Bouton de t√©l√©chargement
                        st.download_button(
                            label="‚¨áÔ∏è T√©l√©charger le PDF",
                            data=pdf_buffer,
                            file_name=f"catalogue_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf",
                            mime="application/pdf"
                        )
                        
                    except Exception as e:
                        st.error(f"‚ùå Erreur lors de la g√©n√©ration PDF : {str(e)}")
            
        except Exception as e:
            st.error(f"‚ùå Erreur lors de la lecture du fichier : {str(e)}")
    
    else:
        st.info("üëÜ Uploadez un fichier CSV pour commencer")
        
        # Exemple de format
        with st.expander("üìã Voir un exemple de format CSV"):
            st.subheader("üìã Format CSV attendu :")
            exemple = pd.DataFrame({
                'nom': ['Produit 1', 'Produit 2'],
                'prix': [19.99, 29.99],
                'description': ['Description 1', 'Description 2']
            })
            st.dataframe(exemple)

if __name__ == "__main__":
    main()
